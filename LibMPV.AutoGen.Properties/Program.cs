// See https://aka.ms/new-console-template for more information

//https://mpv.io/manual/master/#options

using System.CodeDom.Compiler;
using System.Text;
using System.Xml.XPath;
using HtmlAgilityPack;
using LibMPV.AutoGen.Properties;

using var client = new HttpClient();
var s = await client.GetStreamAsync("https://mpv.io/manual/master/#options");
var doc = new HtmlDocument();
doc.Load(s);

var outputfile = Path.GetFullPath("../../../../LibMPVSharp/MediaPlayer/MPVMediaPlayer.Properties.cs");
using var fs = File.OpenWrite(outputfile);
fs.SetLength(0);

using var tw = new StreamWriter(fs);
using var writer = new IndentedTextWriter(tw);

writer.WriteLine("// auto-generated by LibMPV.AutoGen.Properties");

writer.WriteLine("namespace LibMPVSharp");
using (WriteBlock(writer))
{
    writer.WriteLine("/// <summary>");
    writer.WriteLine("/// <see cref=\"https://mpv.io/manual/master/#options\"/>");
    writer.WriteLine("/// </summary>");
    writer.WriteLine("public partial class MPVMediaPlayer");
    using (WriteBlock(writer))
    {
        var nav = doc.CreateNavigator();
        
        //options
        var options = nav.Select("//div[@id='options']/div[@class='section']");
        var filter = new HashSet<string>();

        while (options.MoveNext())
        {
            var current = options.Current;
            if (current == null) continue;
    
            var section = current.Select("./@id");
            section.MoveNext();
            writer.WriteLine($"public static class {ToPropertyName(section?.Current?.Value)}Opts");
            using (WriteBlock(writer))
            {
                var property = current.Select("./dl/dt/tt[1]/span[1]");
                filter.Clear();
                while (property.MoveNext())
                {
                    var value = property.Current?.Value;
                    if (filter.Contains(value)) continue;
                    
                    filter.Add(value);
                    writer.WriteLine($"public static readonly string {ToPropertyName(value)} = \"{ToPropertyValue(value)}\";");
                }
            }
        }
        
        //properties
        writer.WriteLine("public static class Properties");
        using (WriteBlock(writer))
        {
            var properties = nav.Select("//div[@id='property-list']/dl/dt");
            while (properties.MoveNext())
            {
                var current = properties.Current;
                if (current == null) continue;
            
                var spans = current.Select("./tt");
                while (spans.MoveNext())
                {
                    writer.WriteLine($"public static readonly string {ToPropertyName(spans.Current?.Value)} = \"{ToPropertyValue(spans.Current?.Value)}\";");
                }
            }
        }
    }
}

writer.Flush();
Console.WriteLine("done!");
Console.ReadLine();

IDisposable WriteBlock(IndentedTextWriter writer, bool inline = false)
{
    writer.WriteLine("{");
    writer.Indent++;
    return new DisposeObject(() =>
    {
        writer.Indent--;

        if (inline)
            writer.Write("}");
        else
            writer.WriteLine("}");
    });
}

string? ToPropertyName(string? name)
{
    if (string.IsNullOrEmpty(name)) return name;
    var span = name.AsSpan();
    var builder = new StringBuilder();
    bool nextUpper = false;
    for (int i = 0; i < span.Length; i++)
    {
        if (span[i] == '-' || span[i] == '_')
        {
            nextUpper = true;
            continue;
        }
        else if (i == 0)
        {
            builder.Append(char.ToUpper(span[i]));
        }
        else if (span[i] == '=' || span[i] == ',' || span[i] == '.' || span[i] == '/')
        {
            break;
        }
        else
        {
            if (nextUpper)
            {
                builder.Append(char.ToUpper(span[i]));
                nextUpper = false;
            }
            else
            {
                builder.Append(span[i]);
            }
        }
    }
    
    return builder.ToString();
}

string? ToPropertyValue(string? value)
{
    var builder = new StringBuilder();
    var span = value.AsSpan();
    for (int i = 0; i < span.Length; i++)
    {
        if (i <= 1 && (span[i] == '-' || span[i] == '_'))
        {
            continue;
        }
        else if (span[i] == '=' || span[i] == ',' || span[i] == '.' || span[i] == '/')
        {
            break;
        }
        else
        {
            builder.Append(span[i]);
        }
    }
    
    return builder.ToString();
}